
Technolegis and bits for Architecture
SSE     128bit
AVX     256bit




SSE
__m128i a = _mm_set_epi32(4, 3, 2, 1);
__m128i b = _mm_set1_epi32(10);
__m128i c = _mm_add_epi32(a, b);
//_mm_setr_ps   לקבוע float הפוך
//_mm_setr_epi32 

SSE (128 ביט)
__m128i	וקטור של שלמים (8×16 ביט, 4×32 ביט, 2×64 ביט)
__m128	וקטור של 4 מספרים בנקודה צפה (float)
__m128d	וקטור של 2 מספרים בנקודה צפה כפולה (double)

AVX (256 ביט)
__m256i	וקטור של שלמים (16×16 ביט, 8×32 ביט, 4×64 ביט)
__m256	וקטור של 8 מספרים בנקודה צפה (float)
__m256d	וקטור של 4 מספרים בנקודה צפה כפולה (double)


SSE (128 ביט)
טעינה מיושרת: _mm_load_si128, _mm_load_ps, _mm_load_pd​
טעינה לא מיושרת: _mm_loadu_si128, _mm_loadu_ps, _mm_loadu_pd​
הגדרת ערכים: _mm_set1_epi32, _mm_set1_ps, _mm_set1_pd​
אחסון מיושר: _mm_store_si128, _mm_store_ps, _mm_store_pd​
אחסון לא מיושר: _mm_storeu_si128, _mm_storeu_ps, _mm_storeu_pd​
אחסון ללא עצירה במטמון: _mm_stream_si128, _mm_stream_ps, _mm_stream_pd​

AVX (256 ביט)
טעינה מיושרת: _mm256_load_si256, _mm256_load_ps, _mm256_load_pd​
טעינה לא מיושרת: _mm256_loadu_si256, _mm256_loadu_ps, _mm256_loadu_pd​
הגדרת ערכים: _mm256_set1_epi32, _mm256_set1_ps, _mm256_set1_pd​
אחסון מיושר: _mm256_store_si256, _mm256_store_ps, _mm256_store_pd​
אחסון לא מיושר: _mm256_storeu_si256, _mm256_storeu_ps, _mm256_storeu_pd​
אחסון ללא עצירה במטמון: _mm256_stream_si128, _mm256_stream_ps, _mm256_stream_pd​



SSE (128 ביט)   int32
חיבור: _mm_add_epi32​
חיסור: _mm_sub_epi32​
כפל: _mm_mullo_epi32​
השוואה לשוויון: _mm_cmpeq_epi32​
הזזה שמאלה: _mm_slli_epi32​
הזזה ימינה: _mm_srli_epi32​
AND ביטי: _mm_and_si128​
OR ביטי: _mm_or_si128​
XOR ביטי: _mm_xor_si128​

AVX (256 ביט)   int32
חיבור: _mm256_add_epi32​
חיסור: _mm256_sub_epi32​
כפל: _mm256_mullo_epi32​
השוואה לשוויון: _mm256_cmpeq_epi32​
הזזה שמאלה: _mm256_slli_epi32​
הזזה ימינה: _mm256_srli_epi32​
AND ביטי: _mm256_and_si256​
OR ביטי: _mm256_or_si256​
XOR ביטי: _mm256_xor_si256​



SSE (128 ביט)   int16
חיבור: _mm_add_epi16​
חיסור: _mm_sub_epi16​
כפל: _mm_mullo_epi16​
השוואה לשוויון: _mm_cmpeq_epi16​
הזזה שמאלה: _mm_slli_epi16​
הזזה ימינה: _mm_srli_epi16​
AND ביטי: _mm_and_si128​
OR ביטי: _mm_or_si128​
XOR ביטי: _mm_xor_si128​

AVX2 (256 ביט)  int16
חיבור: _mm256_add_epi16​
חיסור: _mm256_sub_epi16​
כפל: _mm256_mullo_epi16​
השוואה לשוויון: _mm256_cmpeq_epi16​
הזזה שמאלה: _mm256_slli_epi16​
הזזה ימינה: _mm256_srli_epi16​
AND ביטי: _mm256_and_si256​
OR ביטי: _mm256_or_si256​
XOR ביטי: _mm256_xor_si256​


SSE (128 ביט)   Floating Point
חיבור: _mm_add_ps​
חיסור: _mm_sub_ps​
כפל: _mm_mul_ps​
חילוק: _mm_div_ps​
שורש ריבועי: _mm_sqrt_ps​
השוואה לשוויון: _mm_cmpeq_ps​
השוואה לגדול מ: _mm_cmpgt_ps​
השוואה לקטן מ: _mm_cmplt_ps​

AVX (256 ביט)
חיבור: _mm256_add_ps​
חיסור: _mm256_sub_ps​
כפל: _mm256_mul_ps​
חילוק: _mm256_div_ps​
שורש ריבועי: _mm256_sqrt_ps​
השוואה לשוויון: _mm256_cmp_ps​
השוואה לגדול מ: _mm256_cmp_ps​
השוואה לקטן מ: _mm256_cmp_ps​
_mm256_fmadd_ps * +
_mm256_min_ps
_mm256_max_ps
_mm256_hadd_ps  (a0+a1, a2+a3, b0+b1, b2+b3, a4+a5, a6+a7, b4+b5, b6+b7)
_mm256_hsub_ps  (a0-a1, a2-a3, b0-b1, b2-b3, a4-a5, a6-a7, b4-b5, b6-b7)

    __m256i simd_int_vec = _mm256_set_epi32(8, 7, 6, 5, 4, 3, 2, 1);
    
    // Extract individual elements
    // Note: For AVX2, we need to extract 128-bit lanes first, then extract from those
__m128i low_lane = _mm256_extracti128_si256(simd_int_vec, 0);  // מקטע נמוך  (1, 2, 3, 4).​
__m128i high_lane = _mm256_extracti128_si256(simd_int_vec, 1); // מקטע גבוה  (5, 6, 7, 8).​

__m128i new_low = _mm_insert_epi32(low_lane, 100, 1);  // מחליף את הערך באינדקס 1
__m128i new_high = _mm_insert_epi32(high_lane, 200, 2); // מחליף את הערך באינדקס 6

__m256i modified_int_vec = _mm256_setr_m128i(new_low, new_high);    // 5. שילוב המקטעים לווקטור של 256 ביט






    // Create a mask to store only elements 1, 3, 5, and 7
    __m256i mask2 = _mm256_set_epi32(-1, 0, -1, 0, -1, 0, -1, 0);
    
    // Perform masked store
    _mm256_maskstore_ps(aligned_data, mask2, test_vec);


    אחסון stream

for (int i = 0; i < LARGE_SIZE; i += 8) {
    __m256 loaded = _mm256_loadu_ps(&large_array[i]);
    __m256 processed = _mm256_mul_ps(loaded, _mm256_set1_ps(2.0f));
    _mm256_stream_ps(&large_array[i], processed);
}
_mm_sfence(); // מבטיח שכל הכתיבות הושלמו